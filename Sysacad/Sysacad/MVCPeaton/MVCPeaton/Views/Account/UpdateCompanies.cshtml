@model MVCPeaton.Models.ViewModels.UpdateBusinessVM
@{
    ViewBag.Title = "Update";
}

<h2>Register</h2>
@using (Html.BeginForm("UpdateBusiness", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.idbusiness)
    @Html.HiddenFor(m => m.idplayeruser)
    @Html.TextBox("iscreated", Model.CreatePlayerUser,new { @hidden="true" });
    @Html.EditorFor(m => m.profilephoto)
    @Html.ValidationMessageFor(model => model.profilephoto)
    @Html.ValidationSummary("", new { @class = "text-danger" })
    <h4>Modificar Empresa.</h4>
    <hr />
    <div class="form-group">
        @Html.LabelFor(m => m.Username, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Username, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Username)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Email)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ConfirmEmail, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.ConfirmEmail, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ConfirmEmail)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.OldPassword, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.OldPassword, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.OldPassword)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Password)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ConfirmPassword)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.name, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.name, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.name)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.typesdocuments, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.idtypedocument, new SelectList(Model.typesdocuments, "IdTypeDocument", "Name", Model.idtypedocument), new { id = "typesdocuments" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.cuitcuilcdi, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.cuitcuilcdi, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.cuitcuilcdi)
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(m => m.address, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.address, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.address)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.addressnumber, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.addressnumber, new { @class = "form-control numbersOnly" })
            @Html.ValidationMessageFor(model => model.addressnumber)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.provinces, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.idprovince, new SelectList(Model.provinces, "Id", "Name", Model.idprovince), new { id = "provinces" })

        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.locations, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.idlocation, new SelectList(Model.locations, "Id", "Name", Model.idlocation), new { id = "locations" })

        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.floor, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.floor, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.floor)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.floornumber, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.floornumber, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.floornumber)
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(m => m.typesactors, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.businesstype, new SelectList(Model.typesactors, "Name", "Name", Model.businesstype), new { id = "typesactors" })

        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.responsablename, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.responsablename, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.responsablename)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.responsablephone, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.responsablephone, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.responsablephone)
        </div>
    </div>





    <div class="form-group">
        @Html.LabelFor(m => m.CreatePlayerUser, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.CheckBoxFor(m => m.CreatePlayerUser, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CreatePlayerUser)
        </div>
    </div>

    <div class="form-group">
        @Html.Label("", "Foto", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            <img src="" id="Photo" width="150" height="150">
            <label for="FileUpload" class="btn btn-primary btn-block btn-outlined" style="width:150px">Seleccionar Foto</label>
            <input type="file" id="FileUpload" accept="image/*" style="display: none" disabled="disabled" class="label-file">
            @Html.ValidationMessageFor(model => model.profilephoto)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.dni, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.dni, new { @class = "form-control", @disabled = "disabled" })
            @Html.ValidationMessageFor(model => model.dni)
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.genres, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.genre, new SelectList(Model.genres, Model.genre), new { @disabled = "disabled" })

        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.profession, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.profession, new { @class = "form-control", @disabled = "disabled" })
            @Html.ValidationMessageFor(model => model.profession)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.publicname, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.publicname, new { @class = "form-control", @disabled = "disabled" })
            @Html.ValidationMessageFor(model => model.publicname)
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.birthdate2, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.birthdate2, new { @class = "form-control", @disabled = "disabled" })
            @Html.ValidationMessageFor(model => model.birthdate2)
        </div>
    </div>

    @*@Html.TextBox("birthdate", DateTime.Now)
        @*((m => m.birthdate, new { @id = "birthdate" })*@



    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" id="btnsubmit" class="btn btn-default" value="Modificar" />
        </div>
    </div>
}
@section styles
{
    <link href="~/Content/strength.css" rel="stylesheet" />
}
@section scripts
{

    <script src="~/Scripts/strength.min.js"></script>

    <script src="~/Scripts/moment-with-locales.min.js"></script>
    <script src="~/Scripts/bootstrap-datetimepicker.min.js"></script>
    <link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
    <script src="~/Scripts/jquery.validate.date.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#addressnumber').bind("cut copy paste", function (e) {
                e.preventDefault();
            });
            var date2 = new Date(new Date().setDate(new Date().getDate() - 2557));
            //$(function () {
            //    $('#birthdate2').datetimepicker({
            //        //format: "mm/dd/yyyy",
            //        locale: 'es',
            //        maxDate: new Date()

            //    });
            //    debugger;
            //    var element = document.getElementById("birthdate2");
            //    $('#birthdate2').val(element.defaultValue);
            //}
            //);
            $(function () {
                    $('#birthdate2').datetimepicker({
                        //format: "mm/dd/yyyy",
                        locale: 'es',
                        maxDate: date2

                    });
                    debugger;
                    var element = document.getElementById("birthdate2");
                    $('#birthdate2').val(element.defaultValue);
                }
                );
            $("#Password").on('change', function () {
                debugger;
                if ($('div[data-meter="Password"]').hasClass("veryweak") || $('div[data-meter="Password"]').hasClass("weak"))
                {
                    alert("La contraseña es débil, debe contener mayusculas, minúsculas, números y un carácter especial como !,',}, etc");
                    $("#btnsubmit").prop("disabled", true);
                }
                else
                {
                    EnDisSubmit();
                }
            })

            $("#btnsubmit").prop("disabled", true);
            if ($("#profilephoto").val() != "undefined" && $("#profilephoto").val() != "")
            { 
                ExecuteDownload();
            }
            debugger;
            
            //if ($("#CreatePlayerUser").val() == "true") {
            if ($("#iscreated").val() == "True") {
                $("#genre").prop('disabled', false);
                $("#publicname").removeProp("disabled");
                $("#FileUpload").prop('disabled', false);
                $("#file").prop('disabled', false);
                $("#dni").removeProp("disabled");
                $("#profession").removeProp("disabled");
                $("#birthdate").removeProp("disabled");
                $("#birthdate2").removeProp("disabled", true);
                $(".label-file").prop('disabled', false);
                $(".label-file").removeProp("disabled");
                if ($("#dni").val() == "")
                { $("#btnsubmit").prop("disabled", true); }
                //$("#CreatePlayerUser").prop.ad.prop("readonly", true);
                $("#CreatePlayerUser").hide();
                $('label[for="CreatePlayerUser"]').html("---Su usuario Jugador---");

            }
            else {
                $("#publicname").prop("disabled", true);
                $("#FileUpload").prop("disabled", true);
                $("#file").prop("disabled", true);
                $("#dni").prop("disabled", true);
                $("#genre").prop('disabled', true);
                $("#genres").prop("disabled", true);
                $("#profession").prop("disabled", true);
                $("#birthdate").prop("disabled", true);
            }
            EnDisSubmit();

            //$("#btnsubmit").prop("disabled", true);

            $("#locations").on('change', function () {
                AddressChange();
            })
            $("#name").on('focusout', function () {
                AddressChange();
            })
            $("#address").on('change', function () {
                AddressChange();
            })
            $("#addressnumber").on('change', function () {
                AddressChange();
            })

            $("#typesdocuments").on('change', function () {
                DocumentChange();
            })
            $("#cuitcuilcdi").on('change', function () {
                DocumentChange();
            })

            $("#profession").on('change', function () {
                CreatePlayerUserValidate();
            })
            $("#publicname").on('change', function () {
                CreatePlayerUserValidate();
            })
            $("#birthdate2").on('focusout', function () {
                CreatePlayerUserValidate();
            })

            function DocumentChange() {
                if ($.trim($("#cuitcuilcdi").val()) == "")
                {
                    $("#btnsubmit").prop("disabled", true);
                    return;
                }
                if (!validarCuit($("#cuitcuilcdi").val(),$.trim($("#typesdocuments").find('option:selected').val())))
                {
                    alert("Cuit/Cuild Inválido");
                    $("#btnsubmit").prop("disabled", true);
                    return;
                }


               var serviceURL = '/Account/SearchByCccdi';
                var obj = {
                    "idtypedoc": "" + $.trim($("#typesdocuments").find('option:selected').val()) + "",
                    "cccdi": "" + $.trim($("#cuitcuilcdi").val()) + "",
                };

                var jsondata = JSON.stringify(obj);
                $.ajax({
                    type: "POST",
                    url: serviceURL,
                    data: jsondata,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: successFunc,
                    error: errorFunc
                });

            }

            $("#CreatePlayerUser").on('change', function(){
                if (this.checked) {
                    $("#genre").prop('disabled', false);
                    $("#publicname").removeProp("disabled");
                    $("#FileUpload").prop('disabled', false);
                    $("#file").prop('disabled', false);
                    $("#dni").removeProp("disabled");
                    $("#profession").removeProp("disabled");
                    $("#birthdate").removeProp("disabled");
                    $("#birthdate2").removeProp("disabled");
                    $(".label-file").prop('disabled', false);
                    $(".label-file").removeProp("disabled");
                    if ($("#dni").val() == "")
                    { $("#btnsubmit").prop("disabled", true); }
                    EnDisSubmit();

                }
                else
                {
                    $("#publicname").prop("disabled", true);
                    $("#FileUpload").prop("disabled", true);
                    $("#file").prop("disabled", true);
                    $("#dni").prop("disabled", true);
                    $("#genre").prop('disabled', true);
                    $("#genres").prop("disabled", true);
                    $("#profession").prop("disabled", true);
                    $("#birthdate").prop("disabled", true);
                    $("#birthdate2").prop("disabled", true);
                    EnDisSubmit();


                }
            })

            function CreatePlayerUserValidate(event) {
                debugger;
                if ($.trim($("#dni").val()) != "" && $.trim($("#profession").val()) != "" && $.trim($("#publicname").val()) != ""
                    && $.trim($("#birthdate2").val()) != "" && $.trim($("#profilephoto").val()) != "" && $("#CreatePlayerUser").prop('checked'))
                    EnDisSubmit();
                else
                    $("#btnsubmit").prop("disabled", true);
            };

            function EnDisSubmit(event) {
                if ($.trim($("#Email").val()) != "" && $.trim($("#Username").val()) != "" && $.trim($("#cuitcuilcdi").val()) != ""
                    && $.trim($("#name").val()) != "" && $.trim($("#address").val()) != ""
                     && $.trim($("#addressnumber").val()) != "")
                {

                    if ($.trim($("#dni").val()) != "" && $.trim($("#profession").val()) != "" && $.trim($("#publicname").val()) != ""
                    && $.trim($("#birthdate2").val()) != "" && $.trim($("#profilephoto").val()) != "" && $("#CreatePlayerUser").prop('checked')) {
                        $("#btnsubmit").removeProp("disabled");
                    }
                    else if (!$("#CreatePlayerUser").prop('checked')) {
                        $("#btnsubmit").removeProp("disabled");
                    }
                    else {
                        $("#btnsubmit").prop("disabled", true);
                    }
                }
                else
                    $("#btnsubmit").prop("disabled", true);
            };

            function AddressChange()
            {

                if ($.trim($("#name").val()) == "" || $.trim($("#address").val()) == ""
                     || $.trim($("#addressnumber").val()) == "")
                {
                    $("#btnsubmit").prop("disabled", true);
                    return;
                }
                var serviceURL = '/Account/SearchByAddress';
                var obj = {
                    "idlocation": "" + $.trim($("#locations").find('option:selected').val()) + "",
                    "address": "" + $.trim($("#address").val()) + "",
                    "addressnumber": "" + $.trim($("#addressnumber").val()) + "",
                    "name": "" + $.trim($("#name").val()) + "",
                };
                debugger;
                var jsondata = JSON.stringify(obj);
                $.ajax({
                    type: "POST",
                    url: serviceURL,
                    data: jsondata,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: successFunc,
                    error: errorFunc
                });

            }


            $('#Password').strength({
                strengthClass: 'strength',
                strengthMeterClass: 'strength_meter',
                strengthButtonClass: 'button_strength',
                strengthButtonText: 'Mostrar Password',
                strengthButtonTextToggle: 'Ocultar Password'
            });

            function successFunc(data, status) {

                if (data.Data == true) {
                    alert("Duplicado");
                    $("#btnsubmit").prop("disabled", true);
                }
                else {
                    EnDisSubmit();
                }
            }

            function errorFunc() {
                $("#btnsubmit").prop("disabled", true);
            }

        $("#dni").on("blur", function (event) {
            if ($.trim($("#dni").val()) == "" || $("#dni").val().indexOf('.com') > -1) {
                $("#btnsubmit").prop("disabled", true);
                return;
            }
        var serviceURL = '/Account/SearchByDocument';
        var obj = {
            "dni": "" + $.trim($("#dni").val()) + "",
            };

        var jsondata = JSON.stringify(obj);
        $.ajax({
            type: "POST",
            url: serviceURL,
            data: jsondata,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: successFunc,
            error: errorFunc
        });

        });

        $("#Username").on("blur", function (event) {
            if ($.trim($("#Username").val()) == "" || $("#Username").val().indexOf('.com') > -1)
            {
                $("#btnsubmit").prop("disabled", true);
                return;
            }

            var serviceURL = '/Account/SearchByUsername';
            var obj = {
                "Username": "" + $.trim($("#Username").val()) + "",
            };

            var jsondata = JSON.stringify(obj);
            $.ajax({
                type: "POST",
                url: serviceURL,
                data: jsondata,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: successFunc,
                error: errorFunc
            });

        });


        $("#Email").on("blur", function (event) {
            if ($.trim($("#Email").val()) == "") {
                $("#btnsubmit").prop("disabled", true);
                return;
            }
            var serviceURL = '/Account/SearchByEmail';
            var obj = {
                "Email": "" + $.trim($("#Email").val()) + "",
            };

            var jsondata = JSON.stringify(obj);
            $.ajax({
                type: "POST",
                url: serviceURL,
                data: jsondata,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: successFunc,
                error: errorFunc
            });

        });






        $('.numbersOnly').keypress(function (e) {
            var verified = (e.which == 8 || e.which == undefined || e.which == 0) ? null : String.fromCharCode(e.which).match(/[^0-9]/);
            if (verified) { e.preventDefault(); }
        });
        function isNumeric(e) {
            var keynum = (!window.event) ? e.which : e.keyCode;
            return !((keynum == 8 || keynum == undefined || e.which == 0) ? null : String.fromCharCode(keynum).match(/[^0-9]/));
        }


        $("#addressnumber").on("keyup", function (event) {

            if ($.trim($("#addressnumber").val().length) == 0) {
                $("#addressnumber").val(0)
                return;
            }
        });

        $('#provinces').change(function () {

            //$('#locations').empty();
            $('#locations').html("");

            $.ajax({
                type: "POST",
                url: "/Province/SearchByProvince",
                datatype: "json",
                data: { idprovince: $('#provinces').val() },
                success: function (data) {
                    $.each(data, function (index, value) {
                        $('#locations').append('<option value="' + value.Id + '">' + value.Name + '</option>');
                    });
                }
            });
        });
        //$("#provinces").find("option:contains('Santa Fe')").each(function () {
        //    if ($(this).text() == 'Santa Fe') {
        //        $(this).attr("selected", "selected");
        //    }
        //});
        //$("select#provinces").change();

        function ExecuteUpload() {
            var formData = new FormData();
            var totalFiles = document.getElementById("FileUpload").files.length;
            for (var i = 0; i < totalFiles; i++) {
                var file = document.getElementById("FileUpload").files[i];

                formData.append("FileUpload", file);
            }
            $.ajax({
                type: "POST",
                url: '/File/UploadPublicPhoto',
                data: formData,
                dataType: 'json',
                contentType: false,
                processData: false,
                success: function (response) {
                    debugger;

                    $("#profilephoto").val(response.Path);
                    EnDisSubmit();
                },
                error: function (error) {
                    alert("errror");
                    $("#profilephoto").val("");
                    EnDisSubmit();
                }
            });
        };


        $("#FileUpload").on("change", function (event) {

            readURL(this);
        });

        function readURL(fileInput) {

            var files = fileInput.files;
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var validExtensions = ['jpg', 'jpeg', 'png', 'gif']; //array of valid extensions
                var fileName = file.name;
                var fileNameExt = fileName.substr(fileName.lastIndexOf('.') + 1);
                debugger;
                if ($.inArray(fileNameExt, validExtensions) == -1) {

                    alert("Tipo de archivo inválido");
                    ClearFile();
                    EnDisSubmit();
                    event.stopPropagation();
                    event.preventDefault();
                    return false;
                }
                else if (file.size / 1024 / 1024 > 5)
                {
                    alert("No puede subir una imagen mayor a 5 Mb");
                    ClearFile();
                    EnDisSubmit();
                    event.stopPropagation();
                    event.preventDefault();
                    return false;
                }
                var img = document.getElementById("Photo");
                img.file = file;
                var reader = new FileReader();
                reader.onload = (function (aImg) {
                    return function (e) {
                        aImg.src = e.target.result;
                    };
                })(img);
                reader.readAsDataURL(file);
                ExecuteUpload();
            }

        }

        function ClearFile()
        {
            document.getElementById("Photo").src = "";
            document.getElementById("FileUpload").files = null;
            document.getElementById("FileUpload").value = "";
            $("#FileUpload").val("");
            $('#file').replaceWith($('#file').clone());
            $("#profilephoto").val("");
        }

        function clearFileInput(ctrl) {
            try {
                ctrl.value = null;
            } catch (ex) { }
            if (ctrl.value) {
                ctrl.parentNode.replaceChild(ctrl.cloneNode(true), ctrl);
            }
        }

    })

        function validarCuit(cuit,typedocument) {

            if (typedocument != 80 && typedocument != 86)
                return true;
            if (cuit.length != 11) {
                return false;
            }

            var acumulado = 0;
            var digitos = cuit.split("");
            var digito = digitos.pop();

            for (var i = 0; i < digitos.length; i++) {
                acumulado += digitos[9 - i] * (2 + (i % 6));
            }

            var verif = 11 - (acumulado % 11);
            if (verif == 11) {
                verif = 0;
            }

            return digito == verif;
        }

        function ExecuteDownload() {
            
            if ($("#profilephoto").val() == "undefined" && $("#profilephoto").val() == "")
                return;
            var qualiter = {
                Fitmode: 4,
                Height: 150,
                Widht: 150,
                Quality: 100
            };

            var requestData = {
                localFilePath: $("#profilephoto").val(),
                qual: qualiter

            };
            $.ajax({
                type: "POST",
                url: '/File/DownloadPublicPhoto',
                data: JSON.stringify(requestData),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    $("#Photo").attr('src', 'data:image/jpeg;base64,' + response.Result);
                },
                error: function (error) {
                    alert("errror");
                }
            });
        };

    </script>
}