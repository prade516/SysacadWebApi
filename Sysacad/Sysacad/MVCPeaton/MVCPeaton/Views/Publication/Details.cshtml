@model MVCPeaton.Models.ViewModels.PublicationVM

@{
    ViewBag.Title = "Details";
}

<div class="form-horizontal">
    @Html.HiddenFor(model => model.Id)
    <input type="hidden" value="@Model.Id" id="idScript" />
    <input type="hidden" value="@Model.photo" id="photoScript" />
    
    <div class="form-group">
        @Html.LabelFor(model => model.title, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DisplayFor(model => model.title, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DisplayFor(model => model.description, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.termscondition, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DisplayFor(model => model.termscondition, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.maxquantity, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DisplayFor(model => model.maxquantity, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.visiblecondition, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DisplayFor(model => model.visiblecondition, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("", "Foto", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            <img src="" id="Photo" width="150" height="150">
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.idpublicationcategory, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DisplayFor(model => model.publicationcategories.FirstOrDefault(p=>p.Id == model.idpublicationcategory).name)
        </div>
    </div>

    <!-- Button trigger modal -->
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal">
        Etiquetas
    </button>

    <br />
    <br />
    <!-- Modal -->
    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">Etiquetas</h4>
                </div>
                <div class="modal-body col-md-12 pre-scrollable">
                    @{
                        for (int i = 0; i < Model.tags.Count; i++)
                        {
                            <div class="form-group">
                                @Html.HiddenFor(Model => Model.tags[i].idbusinessconfigurationtag)
                                @Html.HiddenFor(Model => Model.tags[i].Id)
                                @Html.HiddenFor(Model => Model.tags[i].state)
                                @Html.HiddenFor(Model => Model.tags[i].idpublication)
                                @Html.HiddenFor(Model => Model.tags[i].idtag)
                                <div class="col-md-10">
                                    @Html.DisplayFor(Model => Model.tags[i].name)
                                </div>
                                <div class="col-md-2">
                                    @Html.DisplayFor(Model => Model.tags[i].ischecked)
                                </div>
                            </div>
                                <br />
                        }
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal" id="saveChangeTags">Cerrar</button>
                </div>
            </div>
        </div>
    </div>

    <p>
        @Html.ActionLink("Edit", "UpdateForm", new { id = Model.Id }) |
        @Html.ActionLink("Back to List", "Index")
    </p>
</div>

@section scripts
{
    <script>
    $(document).ready(function () {
        //Photo
        $("#FileUpload").on("change", function (event) {
            readURL(this);
        });

        function EnDisSubmit(event) {

        };

        function ExecuteUpload() {
            var formData = new FormData();
            var totalFiles = document.getElementById("FileUpload").files.length;
            for (var i = 0; i < totalFiles; i++) {
                var file = document.getElementById("FileUpload").files[i];
                formData.append("FileUpload", file);
            }
            $.ajax({
                type: "POST",
                url: '/File/UploadPublicPhoto',
                data: formData,
                dataType: 'json',
                contentType: false,
                processData: false,
                success: function (response) {
                    $("#photo").val(response.Path);
                    EnDisSubmit();
                },
                error: function (error) {
                    $("#photo").val("");
                    EnDisSubmit();
                }
            });
        };

        function readURL(fileInput) {

            var files = fileInput.files;
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var validExtensions = ['jpg', 'jpeg', 'png', 'gif'];
                var fileName = file.name;
                var fileNameExt = fileName.substr(fileName.lastIndexOf('.') + 1);
                if ($.inArray(fileNameExt, validExtensions) == -1) {

                    alert("Tipo de archivo inválido");
                    ClearFile();
                    EnDisSubmit();
                    event.stopPropagation();
                    event.preventDefault();
                    return false;
                }
                else if (file.size / 1024 / 1024 > 5) {
                    alert("No puede subir una imagen mayor a 5 Mb");
                    ClearFile();
                    EnDisSubmit();
                    event.stopPropagation();
                    event.preventDefault();
                    return false;
                }
                var img = document.getElementById("Photo");
                img.file = file;
                var reader = new FileReader();
                reader.onload = (function (aImg) {
                    return function (e) {
                        aImg.src = e.target.result;
                    };
                })(img);
                reader.readAsDataURL(file);
                ExecuteUpload();
            }

        }

        function ClearFile() {
            document.getElementById("Photo").src = "";
            document.getElementById("FileUpload").files = null;
            document.getElementById("FileUpload").value = "";
            $("#FileUpload").val("");
            $('#file').replaceWith($('#file').clone());
            $("#photo").val("");
        }

        function clearFileInput(ctrl) {
            try {
                ctrl.value = null;
            }
            catch (ex) {

            }
            if (ctrl.value) {
                ctrl.parentNode.replaceChild(ctrl.cloneNode(true), ctrl);
            }
        }

        //Charge photo
        {
            var idElement = document.getElementById("idScript");
            var photoElement = document.getElementById("photoScript");
            id = idElement.value;
            profilephoto = photoElement.value;
            {
                var qualiter = {
                    Fitmode: 2,
                    Height: 150,
                    Widht: 150,
                    Quality: 100
                };

                var requestData = {
                    localFilePath: JSON.parse(JSON.stringify(profilephoto).replace(/\\""/g, '')),
                    qual: qualiter
                };

                $.ajax({
                    type: "POST",
                    url: '/File/DownloadPublicPhoto',
                    data: JSON.stringify(requestData),
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        $("#Photo").attr("src", 'data:image/png;base64,' + response.Result);
                    },
                    error: function (error) {
                        console.log("error");
                    }
                });

                function base64encode(binary) {
                    return btoa(unescape(encodeURIComponent(binary)));
                }
            };
        }
    });
    </script>
}